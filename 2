// OOP_App.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <string>
#include <fstream>

struct Item {
    int ParentFolderID;
    int ItemID;
    char ItemType;
    std::string ItemName;
    std::string Content;
};

std::vector<Item> readContentDescriptor(const char* filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        Item item;
        sscanf_s(line.c_str(), "%d|%d|%c|%[^|]|%[^\n]", &item.ParentFolderID, &item.ItemID, &item.ItemType, item.ItemName.c_str(), item.Content.c_str());
        items.push_back(item);
    }
    file.close();
    return items;
}

void displayContents(const std::vector<Item>& items, int parentID, int depth = 0) {
    for (const auto& item : items) {
        if (item.ParentFolderID == parentID) {
            for (int i = 0; i < depth; ++i) {
                std::cout << "   ";
            }
            std::cout << "(" << item.ItemType << ") " << item.ItemName;
            if (item.ItemType == 'F') {
                std::cout << " -> " << item.Content;
            }
            std::cout << std::endl;
            displayContents(items, item.ItemID, depth + 1);
        }
    }
}

int _tmain(int argc, char* argv[])
{
    char* filePath;

    // Get the current working directory: 
    if ((filePath = _getcwd(NULL, 0)) == NULL)
    {
        perror("_getcwd error");
        return (-1);
    }

    char *sampleFileName = "\\ContentDescriptor.txt";
    strncat(filePath, sampleFileName, strlen(sampleFileName));

    printf("Reading file %s \n\n", filePath);

    HANDLE hFile = CreateFile(filePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

    if (hFile == INVALID_HANDLE_VALUE)
    {
        printf("Unable to open file \"%s\" for read.\n", filePath);
        return (-1);
    }

    DWORD dwNumToRead = GetFileSize(hFile, NULL);
    DWORD dwNumRead;
    char *dwBuffer = new char[dwNumToRead];

    if (FALSE == ReadFile(hFile, dwBuffer, dwNumToRead - 1, &dwNumRead, NULL))
    {
        printf("Unable to read from file.\n");
        CloseHandle(hFile);
        return (-1);
    }

    if (dwNumRead > 0 && dwNumRead <= dwNumToRead - 1)
    {
        dwBuffer[dwNumRead] = '\0'; // NULL character

        printf("Data from file: \n\n%s\n", dwBuffer);
    }

    BOOL bResult = CloseHandle(hFile);
    //free(dwBuffer);

    // Display contents of ContentDescriptor.txt
    std::vector<Item> items = readContentDescriptor(filePath);
    displayContents(items, 0);

    printf("\nPress any key to continue...");
    _getch();
    return 0;
}

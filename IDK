#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

struct Item {
    int ParentFolderID;
    int ItemID;
    char ItemType;
    std::string ItemName;
    std::string Content;
};

std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        // Skip header and empty lines
        if (line.empty() || line.find("Possible item types:") != std::string::npos) {
            continue;
        }

        Item item;
        if (sscanf(line.c_str(), "%d|%d|%c|%[^|]|%[^\n]", &item.ParentFolderID, &item.ItemID, &item.ItemType, &item.ItemName[0], &item.Content[0]) != 5) {
            std::cerr << "Error parsing line: " << line << std::endl;
            continue;
        }

        items.push_back(item);
    }

    file.close();
    return items;
}

void displayContents(const std::vector<Item>& items, int parentId = 0, int depth = 0) {
    for (const Item& item : items) {
        if (item.ParentFolderID == parentId) {
            std::string indentation(depth * 3, ' ');
            std::cout << indentation;

            if (item.ItemType == 'D') {
                std::cout << "(D) " << item.ItemName << std::endl;
                displayContents(items, item.ItemID, depth + 1);
            } else if (item.ItemType == 'F') {
                std::cout << "(F) " << item.ItemName;
                if (!item.Content.empty()) {
                    std::cout << " -> " << item.Content;
                }
                std::cout << std::endl;
            }
        }
    }
}

void readAndDisplayContents(const std::string& filePath) {
    std::vector<Item> items = readContentDescriptor(filePath);
    displayContents(items);
}

int _tmain(int argc, _TCHAR* argv[]) {
    // Assuming the file path is provided as the first command-line argument
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <ContentDescriptor.txt>" << std::endl;
        return 1;
    }

    std::string filePath = argv[1];
    readAndDisplayContents(filePath);

    return 0;
}

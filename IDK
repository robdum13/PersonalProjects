#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

struct Item {
    int ParentFolderID;
    int ItemID;
    char ItemType;
    std::string ItemName;
    std::string Content;
};

std::vector<Item> readContentDescriptor(const std::string& filePath) {
    std::vector<Item> items;
    std::ifstream file(filePath);

    if (!file.is_open()) {
        std::cerr << "Error: Unable to open file " << filePath << std::endl;
        return items;
    }

    std::string line;
    while (std::getline(file, line)) {
        Item item;
        std::istringstream iss(line);
        char separator;
        if (iss >> item.ParentFolderID >> separator >> item.ItemID >> separator >> item.ItemType >> separator >> item.ItemName >> separator >> item.Content) {
            items.push_back(item);
        } else {
            std::cerr << "Error parsing line: " << line << std::endl;
        }
    }

    file.close();
    return items;
}

void displayContents(const std::vector<Item>& items, int parentId = 0, int depth = 0) {
    for (const Item& item : items) {
        if (item.ParentFolderID == parentId) {
            std::string indentation(depth * 3, ' ');
            std::cout << indentation;

            if (item.ItemType == 'D') {
                std::cout << "(Directory) " << item.ItemName << std::endl;
                displayContents(items, item.ItemID, depth + 1); // Recursive call for directories
            } else if (item.ItemType == 'F') {
                std::cout << "(File) " << item.ItemName;
                if (!item.Content.empty()) {
                    std::cout << " -> " << item.Content; // Display file content if available
                }
                std::cout << std::endl;
            }
        }
    }
}

int _tmain(int argc, _TCHAR* argv[]) {
    char* filePath;

    // Get the current working directory: 
    if ((filePath = _getcwd(NULL, 0)) == NULL) {
        perror("_getcwd error");
        return (-1);
    }

    char* sampleFileName = "\\ContentDescriptor.txt";
    strncat(filePath, sampleFileName, strlen(sampleFileName));

    printf("Reading file %s \n\n", filePath);

    HANDLE hFile = CreateFile(filePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);

    if (hFile == INVALID_HANDLE_VALUE) {
        printf("Unable to open file \"%s\" for read.\n", filePath);
        return (-1);
    }

    DWORD dwNumToRead = GetFileSize(hFile, NULL);
    DWORD dwNumRead;
    char* dwBuffer = new char[dwNumToRead];

    if (FALSE == ReadFile(hFile, dwBuffer, dwNumToRead - 1, &dwNumRead, NULL)) {
        printf("Unable to read from file.\n");
        CloseHandle(hFile);
        return (-1);
    }

    if (dwNumRead > 0 && dwNumRead <= dwNumToRead - 1) {
        dwBuffer[dwNumRead] = '\0'; // NULL character

        printf("Data from file: \n\n%s\n", dwBuffer);
    }

    BOOL bResult = CloseHandle(hFile);

    std::vector<Item> items = readContentDescriptor(filePath);
    displayContents(items);

    printf("\nPress any key to continue...");
    _getch();
    return 0;
}
